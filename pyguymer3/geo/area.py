def area(shape, kwArgCheck = None, eps = 1.0e-12, keepInvalid = False, level = 1, nmax = 100):
    # Import special modules ...
    try:
        import shapely
        import shapely.ops
    except:
        raise Exception("\"shapely\" is not installed; run \"pip install --user Shapely\"") from None

    # Import sub-functions ...
    from ._area import _area
    from .extract_polys import extract_polys

    # Check keyword arguments ...
    if kwArgCheck is not None:
        print(f"WARNING: \"{__name__}\" has been called with an extra positional argument")

    # **************************************************************************

    # Initialize total ...
    tot = 0.0                                                                   # [m2]

    # Loop over Polygons in the Voronoi diagram of the shape ...
    for voronoi in extract_polys(shapely.ops.voronoi_diagram(shape), keepInvalid = keepInvalid):
        # Loop over parts of the Polygons which intersect the shape ...
        for voronoiPart in extract_polys(shape.intersection(voronoi), keepInvalid = keepInvalid):
            # Loop over triangles within the Polygon ...
            for triangle1 in extract_polys(shapely.ops.triangulate(voronoiPart), keepInvalid = keepInvalid):
                # Check if the user wants this level of refinement ...
                if level == 1:
                    # Increment the total and move on to the next one ...
                    tot += _area(triangle1, eps = eps, nmax = nmax)             # [m2]
                    continue

                # Loop over triangles within the triangle ...
                for triangle2 in extract_polys(shapely.ops.triangulate(triangle1), keepInvalid = keepInvalid):
                    # Check if the user wants this level of refinement ...
                    if level == 2:
                        # Increment the total and move on to the next one ...
                        tot += _area(triangle2, eps = eps, nmax = nmax)         # [m2]
                        continue

                    # Loop over triangles within the triangle ...
                    for triangle3 in extract_polys(shapely.ops.triangulate(triangle2), keepInvalid = keepInvalid):
                        # Check if the user wants this level of refinement ...
                        if level == 3:
                            # Increment the total and move on to the next one ...
                            tot += _area(triangle3, eps = eps, nmax = nmax)     # [m2]
                            continue

                        # Loop over triangles within the triangle ...
                        for triangle4 in extract_polys(shapely.ops.triangulate(triangle3), keepInvalid = keepInvalid):
                            # Check if the user wants this level of refinement ...
                            if level == 4:
                                # Increment the total and move on to the next
                                # one ...
                                tot += _area(triangle4, eps = eps, nmax = nmax) # [m2]
                                continue

                            # Cry ...
                            raise Exception(f"\"level\" is too large (f{level:,d})") from None

    # Return total ...
    return tot
